//
//  GTFSParser.swift
//  sptransAPI
//
//  Created by resource on 8/2/16.
//  Copyright Â© 2016 bienemann. All rights reserved.
//

import Foundation
import Alamofire

class GTFSParser {
    
    static let sharedInstance = GTFSParser()
    
    func parseFromURL(urlString : String){
        Alamofire.request(.GET, urlString).responseData { (response) in
            self.GTFSFileToArray(response.data!, completion: { (dataArray) in
                if dataArray != nil{
                    for dict in dataArray! {
                        print(dict)
                    }
                }
            })
        }
    }
    
    func GTFSFileToArray(data: NSData, completion: (Array<Dictionary<String, AnyObject>>?) -> Void){
        //Start parsing in a background thread
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)) {
            
            //return nil if we can't get a UTF-8 string from the data
            guard let dataString = NSString(data: data, encoding: NSUTF8StringEncoding) else {
                dispatch_async(dispatch_get_main_queue(), { 
                    completion(nil)
                })
                return
            }
            
            //break file into lines
            var lines : Array<String> = dataString.componentsSeparatedByCharactersInSet(.newlineCharacterSet())
            lines = lines.filter { (line) -> Bool in
                //remove empty lines (generated by \n\r line breaks)
                return line.characters.count > 0
            }
            
            //separate and 'clean' first line for indexing values
            var indexLine : Array<String> = lines.first!.componentsSeparatedByString(",")
            for (index,component) in indexLine.enumerate() {
                indexLine[index] = component.stringByReplacingOccurrencesOfString("\"", withString: "")
            }
            lines.removeFirst()
            
            var parsedArray : Array<Dictionary<String, AnyObject>> = Array()
            
            //parse each line in a key/value dictionary
            for line in lines {
                let elements : Array<String> = line.componentsSeparatedByString(",")
                var lineDict : Dictionary<String, AnyObject> = Dictionary()
                
                for (index, var element) in elements.enumerate() {
                    element = element.stringByReplacingOccurrencesOfString("\"", withString: "")
                    lineDict.updateValue(element, forKey: indexLine[index])
                }
                
                parsedArray.append(lineDict)
            }
            
            completion(parsedArray)
        }
    }
    
    func parseAgency(data: NSDictionary){
        
    }
    
}
